#!/usr/bin/env node

(async () => {
    const { join } = require("path");
    const verify = require("..");

    const projectDir = process.env.INIT_CWD || process.cwd();

    const config = loadConfig();
    const releaseConfig = loadReleaseConfig();

    const { webpackVersion: version, webpackPath: path } = config;
    if (version || path) {
        await verify.installNsWebpack({ version, path });
        await verify.addHelperScripts();
    }

    const { updateWebpack } = config;
    if (updateWebpack) {
        const options = Object.keys(updateWebpack)
            .filter(o => updateWebpack[o]);

        await verify.update(options);
    }

    const { build = [], run = [] } = config;
    await verifyApp(build, verify.verifyBuild);
    await verifyApp(run, verify.verifyRun);

    process.exit(0);

    async function verifyApp(configurations, verification) {
        const buildResults = {};
        for (const [index, build] of configurations.entries()) {
            const keepReport = shouldKeepReport(build, config);
            const name = build.name || index.toString();

            buildResults[name] = await
                verification(build, releaseConfig, keepReport && name);
        }

        return buildResults;
    }

    function shouldKeepReport(build, config) {
        return build.hasOwnProperty("keepReport") ?
            build.keepReport :
            config.keepReport;
    }

    function loadConfig() {
        const configPath =  process.env.npm_config_path;
        if (!configPath) {
            console.error("You must specify configuration file path!");
            process.exit(1);
        }
        const config = loadJson(configPath);

        return config;
    }

    function loadReleaseConfig() {
        const releaseConfig = {
            android: "--release",
            ios: "--release"
        };

        const releaseConfigPath = process.env.npm_config_release_config || config.releaseConfig;
        if (releaseConfigPath) {
            const loadedConfig = loadJson(releaseConfigPath);
            const overrideDefaults = key => releaseConfig[key] = loadedConfig[key];
            Object.keys(loadedConfig).forEach(overrideDefaults)
        }

        return releaseConfig;
    }

    function loadJson(path) {
        const fullPath = path.startsWith(".") ? join(projectDir, path) : path;
        const file = require(fullPath);

        return file;
    }
})();

